# -*- coding: utf-8 -*-
"""text_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pC72JtyfMF1KfDCQzhof9XUqMrS_v60l
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import joblib
from sklearn.pipeline import Pipeline

# importing google drive
from google.colab import drive
import os

# mounting google drive
drive.mount('/content/drive')

# base path of dataset
base_path = "/content/drive/MyDrive/ir_assignment/classification"

categories = ["health", "politics", "business"]
texts, labels = [], []

# combining datasets from diffrent paths
for category in categories:
    folder = os.path.join(base_path, category)
    for filename in os.listdir(folder):
        if filename.endswith(".txt"):
            filepath = os.path.join(folder, filename)
            with open(filepath, "r", encoding="utf-8") as f:
                content = f.read()
                texts.append(content)
                labels.append(category)

# split train/test
X_train, X_test, y_train, y_test = train_test_split(
    texts, labels, test_size=0.2, random_state=42, stratify=labels
)

# TF-IDF vectorizer
vectorizer = TfidfVectorizer(stop_words="english", ngram_range=(1,2))
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Trainining Logistic Regression
clf = LogisticRegression(max_iter=1000, solver="lbfgs")
clf.fit(X_train_tfidf, y_train)

# Evaluation
y_pred = clf.predict(X_test_tfidf)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Saving model + vectorizer pkl file
joblib.dump(clf, "logreg_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

# testing the classification with raw input

# classification test function
def classify_text(text):
    vectorizer = joblib.load("tfidf_vectorizer.pkl")
    clf = joblib.load("logreg_model.pkl")
    X = vectorizer.transform([text])
    prediction = clf.predict(X)[0]
    proba = clf.predict_proba(X)[0]
    return prediction, dict(zip(clf.classes_, proba))

# Example interaction
doc = "Regular exercise and a balanced diet can significantly reduce the risk of heart disease and diabetes"
label, probs = classify_text(doc)
print("Predicted:", label)
print("Probabilities:", probs)

